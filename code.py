import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import numpy
import matplotlib.pyplot as plt
# 데이터
x_train = torch.FloatTensor([[1.0], [2.0], [3.0], [4.0], [5.0], [6.0], [7.0], [8.0], [9.0], [10.0], [11.0], [12.0], [13.0], [14.0], [15.0], [16.0], [17.0], [18.0], [19.0], [20.0], [21.0], [22.0], [23.0], [24.0], [25.0], [26.0], [27.0], [28.0], [29.0], [30.0], [31.0], [32.0], [33.0], [34.0], [35.0], [36.0], [37.0], [38.0], [39.0], [40.0], [41.0], [42.0], [47.0], [48.0], [49.0], [50.0], [51.0], [52.0], [53.0], [54.0], [55.0], [56.0], [57.0], [58.0], [59.0], [60.0], [61.0], [62.0], [63.0], [64.0], [65.0], [66.0], [67.0], [68.0], [69.0], [70.0], [71.0], [72.0], [73.0], [74.0], [75.0], [76.0], [77.0], [78.0], [79.0], [80.0], [81.0], [82.0], [83.0], [84.0], [85.0], [86.0], [87.0], [88.0], [89.0], [90.0], [91.0], [92.0], [93.0], [94.0], [95.0], [96.0], [97.0], [98.0], [99.0], [100.0], [101.0], [102.0], [103.0], [104.0], [105.0], [106.0], [107.0], [108.0], [109.0], [110.0], [111.0], [112.0], [113.0], [114.0], [115.0]])
y_train = torch.FloatTensor([[10.4], [10.6], [10.3], [10.6], [10.1], [10.0], [12.0], [10.8], [10.9], [9.8], [10.5], [11.1], [11.4], [10.9], [10.8], [10.6], [11.0], [10.7], [10.5], [11.0], [11.1], [11.4], [11.8], [10.9], [11.6], [10.5], [10.1], [11.2], [9.8], [11.4], [10.9], [11.7], [10.8], [11.1], [10.9], [11.7], [10.9], [10.4], [11.3], [9.6], [11.7], [11.7], [11.4], [11.5], [10.1], [10.4], [11.6], [12.0], [12.1], [12.4], [11.7], [11.3], [12.2], [11.4], [11.5], [11.6], [11.8], [10.9], [11.4], [11.5], [11.9], [12.0], [11.1], [12.5], [11.5], [12.3], [12.4], [12.5], [10.8], [11.2], [12.5], [12.4], [11.6], [11.6], [11.2], [11.9], [12.1], [13.0], [12.8], [12.3], [12.5], [12.0], [13.5], [12.2], [12.2], [12.9], [13.8], [13.2], [12.7], [12.8], [12.9], [12.8], [13.3], [12.1], [13.0], [13.3], [12.9], [12.9], [12.1], [12.0], [12.2], [12.5], [13.4], [13.6], [13.6], [13.0], [12.9], [13.5], [13.2], [13.7], [13.2]])
# 모델 초기화
W = torch.zeros(1, requires_grad=True)
b = torch.zeros(1, requires_grad=True)
# optimizer 설정
optimizer = optim.SGD([W, b], lr=0.0001)
t = []
w_r = []
nb_epochs = 150000 # 원하는만큼 경사 하강법을 반복
for epoch in range(nb_epochs + 1):

    # H(x) 계산
    hypothesis = x_train * W + b

    # cost 계산
    cost = torch.mean((hypothesis - y_train) ** 2)

    # cost로 H(x) 개선
    optimizer.zero_grad()
    cost.backward()
    optimizer.step()

    # 100번마다 로그 출력
    if epoch % 100 == 0:
        print('Epoch {:4d}/{} W: {:.3f}, b: {:.3f} Cost: {:.6f}'.format(
            epoch, nb_epochs, W.item(), b.item(), cost.item()
        ))
    t.append(epoch)
    w_r.append(cost.item())

x = [_ for _ in range(1,112)]
y = [(W.item()*number + b.item()) for number in x]

x_R = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0]
y_R = [10.4, 10.6, 10.3, 10.6, 10.1, 10.0, 12.0, 10.8, 10.9, 9.8, 10.5, 11.1, 11.4, 10.9, 10.8, 10.6, 11.0, 10.7, 10.5, 11.0, 11.1, 11.4, 11.8, 10.9, 11.6, 10.5, 10.1, 11.2, 9.8, 11.4, 10.9, 11.7, 10.8, 11.1, 10.9, 11.7, 10.9, 10.4, 11.3, 9.6, 11.7, 11.7, 11.4, 11.5, 10.1, 10.4, 11.6, 12.0, 12.1, 12.4, 11.7, 11.3, 12.2, 11.4, 11.5, 11.6, 11.8, 10.9, 11.4, 11.5, 11.9, 12.0, 11.1, 12.5, 11.5, 12.3, 12.4, 12.5, 10.8, 11.2, 12.5, 12.4, 11.6, 11.6, 11.2, 11.9, 12.1, 13.0, 12.8, 12.3, 12.5, 12.0, 13.5, 12.2, 12.2, 12.9, 13.8, 13.2, 12.7, 12.8, 12.9, 12.8, 13.3, 12.1, 13.0, 13.3, 12.9, 12.9, 12.1, 12.0, 12.2, 12.5, 13.4, 13.6, 13.6, 13.0, 12.9, 13.5, 13.2, 13.7, 13.2]
plt.plot(x_R,y_R,'o')
plt.plot(x,y)
plt.show()
